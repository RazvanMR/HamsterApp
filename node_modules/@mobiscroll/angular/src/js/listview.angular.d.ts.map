{"version":3,"file":"listview.angular.d.ts","sources":["listview.angular.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, EventEmitter, ElementRef, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { MbscBase, Observable, MbscOptionsService } from './frameworks/angular';\nimport { ListView, MbscListviewOptions } from './classes/listview';\nexport { MbscListviewOptions };\nexport declare class MbscListviewService {\n    private addObservable;\n    private removeObservable;\n    private cardObservable;\n    private instanceObservable;\n    inst: any;\n    notifyInstanceReady(instance: any): void;\n    onInstanceReady(): Observable<any>;\n    notifyAdded(item: any, parent?: any): void;\n    notifyRemoved(item: any): void;\n    notifyCardPresence(isCard: boolean): void;\n    onCardContent(): Observable<boolean>;\n    onItemAdded(): Observable<any>;\n    onItemRemoved(): Observable<any>;\n}\nexport declare class MbscSublistService {\n    private addObservable;\n    private removeObserable;\n    notifyAdded(item: any): void;\n    notifyRemoved(item: any): void;\n    onItemAdded(): Observable<any>;\n    onItemRemoved(): Observable<any>;\n}\nexport declare class MbscListitemService {\n    private sublistSubject;\n    inst: any;\n    notifySublistCreated(item: any): void;\n    onSublistCreated(): Observable<any>;\n}\nexport declare class MbscListviewSublist implements OnInit {\n    parentServ: MbscListviewService;\n    subServ: MbscSublistService;\n    itemService: MbscListitemService;\n    constructor(parentServ: MbscListviewService, subServ: MbscSublistService, itemService: MbscListitemService);\n    ngOnInit(): void;\n}\nexport declare class MbscListviewItem implements AfterViewInit, OnDestroy {\n    elem: ElementRef;\n    lvService: MbscListviewService;\n    lvItemService: MbscListitemService;\n    subService: MbscSublistService;\n    _selected: boolean;\n    id: number;\n    icon: string;\n    iconAlign: string;\n    type: string;\n    clone: any;\n    mounted: boolean;\n    isParent: boolean;\n    _instance: any;\n    readonly Index: any;\n    readonly Element: any;\n    instanceObserver: number;\n    sublistObserver: number;\n    subitemObserver: number;\n    sublist: MbscListviewSublist;\n    constructor(elem: ElementRef, lvService: MbscListviewService, lvItemService: MbscListitemService, subService: MbscSublistService);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    selected: boolean;\n    selectedChange: EventEmitter<boolean>;\n    toggle(): void;\n}\nexport declare class MbscListviewHeader extends MbscListviewItem {\n    constructor(elem: ElementRef, lvService: MbscListviewService, itemService: MbscListitemService, subService: MbscSublistService);\n}\nexport declare class MbscListview extends MbscBase {\n    elem: ElementRef;\n    lvService: MbscListviewService;\n    optionService: MbscOptionsService;\n    instance: ListView;\n    actions: Array<any> | {\n        left?: any;\n        right?: any;\n    };\n    actionsWidth: number;\n    context: string | HTMLElement;\n    striped: boolean;\n    animateAddRemove: boolean;\n    actionable: boolean;\n    animateIcons: boolean;\n    enhance: boolean;\n    fillAnimation: boolean;\n    fixedHeader: boolean;\n    hover: 'left' | 'right' | {\n        direction?: 'left' | 'right';\n        time?: number;\n        timeout?: number;\n    };\n    iconSlide: boolean;\n    itemGroups: any;\n    loadingIcon: string;\n    navigateOnDrop: boolean;\n    quickSwipe: boolean;\n    select: 'off' | 'single' | 'multiple';\n    sortable: boolean | {\n        group?: boolean;\n        handle?: boolean | 'left' | 'right';\n        multilevel?: boolean;\n    };\n    sortDelay: number;\n    stages: Array<any> | {\n        left?: Array<any>;\n        right?: Array<any>;\n    };\n    swipe: boolean | 'left' | 'right' | ((args: {\n        target: HTMLElement;\n        index: number;\n        direction: 'left' | 'right';\n    }, inst: any) => (boolean | 'left' | 'right'));\n    swipeleft: () => void;\n    swiperight: () => void;\n    vibrate: boolean;\n    undoText: string;\n    backText: string;\n    onItemTap: EventEmitter<{\n        target: HTMLElement;\n        domEvent: any;\n        selected: boolean;\n        index: number;\n        inst: any;\n    }>;\n    onItemAdd: EventEmitter<{\n        target: HTMLElement;\n        inst: any;\n    }>;\n    onItemRemove: EventEmitter<{\n        target: HTMLElement;\n        inst: any;\n    }>;\n    onListEnd: EventEmitter<{\n        inst: any;\n    }>;\n    onNavEnd: EventEmitter<{\n        level: number;\n        direction: 'left' | 'right';\n        list: HTMLElement;\n        inst: any;\n    }>;\n    onNavStart: EventEmitter<{\n        level: number;\n        direction: 'left' | 'right';\n        list: HTMLElement;\n        inst: any;\n    }>;\n    onSlideEnd: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSlideStart: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSort: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSortChange: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSortStart: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSortEnd: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onSortUpdate: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        inst: any;\n    }>;\n    onStageChange: EventEmitter<{\n        target: HTMLElement;\n        index: number;\n        stage: any;\n        inst: any;\n    }>;\n    options: MbscListviewOptions;\n    cardContent: boolean;\n    items: QueryList<MbscListviewItem>;\n    addObserver: number;\n    cardObserver: number;\n    removeObserver: number;\n    constructor(elem: ElementRef, zone: NgZone, lvService: MbscListviewService, optionService: MbscOptionsService);\n    tapHandler(event: any, inst: any): void;\n    private _getItem;\n    initControl(): void;\n    ngOnDestroy(): void;\n}\nexport declare class MbscListviewModule {\n}\n"]}