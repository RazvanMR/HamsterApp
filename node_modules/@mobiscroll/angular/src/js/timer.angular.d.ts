import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MbscScrollerBase, MbscInputService, MbscOptionsService } from './frameworks/angular';
import { Timer, MbscTimerOptions } from './presets/timer';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './frameworks/angular';
import * as ɵngcc3 from './input.angular';
export { MbscTimerOptions };
export declare class MbscTimer extends MbscScrollerBase {
    optionService: MbscOptionsService;
    instance: Timer;
    autostart: boolean;
    maxWheel: 'years' | 'months' | 'days' | 'hours' | 'minutes' | 'seconds' | 'fract';
    mode: 'countdown' | 'stopwatch';
    step: number;
    targetTime: number;
    useShortLabels: boolean;
    hideText: string;
    labels: Array<string>;
    labelsShort: Array<string>;
    lapText: string;
    resetText: string;
    startText: string;
    stopText: string;
    onLap: EventEmitter<{
        ellapsed: number;
        lap: number;
        laps: Array<number>;
        inst: any;
    }>;
    onFinish: EventEmitter<{
        time: number;
        inst: any;
    }>;
    onReset: EventEmitter<{
        inst: any;
    }>;
    onStart: EventEmitter<{
        inst: any;
    }>;
    onStop: EventEmitter<{
        ellapsed: number;
        inst: any;
    }>;
    options: MbscTimerOptions;
    value: any;
    onChangeEmitter: EventEmitter<any>;
    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: any): void;
    protected handleChange(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTimer, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscTimer, "[mbsc-timer]", ["mobiscroll"], { "value": "mbsc-timer"; "autostart": "autostart"; "maxWheel": "maxWheel"; "mode": "mode"; "step": "step"; "targetTime": "targetTime"; "useShortLabels": "useShortLabels"; "hideText": "hideText"; "labels": "labels"; "labelsShort": "labelsShort"; "lapText": "lapText"; "resetText": "resetText"; "startText": "startText"; "stopText": "stopText"; "options": "mbsc-options"; }, { "onLap": "onLap"; "onFinish": "onFinish"; "onReset": "onReset"; "onStart": "onStart"; "onStop": "onStop"; "onChangeEmitter": "mbsc-timerChange"; }, never>;
}
export declare class MbscTimerComponent extends MbscTimer {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscTimerOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTimerComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscTimerComponent, "mbsc-timer", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscTimerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscTimerModule, [typeof MbscTimer, typeof MbscTimerComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscScrollerBaseModule, typeof ɵngcc3.MbscInputModule], [typeof MbscTimer, typeof MbscTimerComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscTimerModule>;
}

//# sourceMappingURL=timer.angular.d.ts.map