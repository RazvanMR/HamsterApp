{"version":3,"file":"measurement.angular.d.ts","sources":["measurement.angular.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { MbscScrollerBase, MbscInputService, MbscOptionsService } from './frameworks/angular';\nimport './presets/temperature';\nimport './presets/distance';\nimport './presets/speed';\nimport './presets/force';\nimport './presets/mass';\nimport { MbscMeasurementOptions, Measurement } from './presets/measurement';\nimport { Temperature, MbscTemperatureOptions } from './presets/temperature';\nimport { Distance, MbscDistanceOptions } from './presets/distance';\nimport { Speed, MbscSpeedOptions } from './presets/speed';\nimport { Mass, MbscMassOptions } from './presets/mass';\nimport { Force, MbscForceOptions } from './presets/force';\nexport { MbscMeasurementOptions, MbscTemperatureOptions, MbscDistanceOptions, MbscSpeedOptions, MbscMassOptions, MbscForceOptions };\nexport declare class MbscMeasurementBase extends MbscScrollerBase {\n    optionService: MbscOptionsService;\n    max: number;\n    min: number;\n    decimalSeparator: string;\n    defaultValue: string;\n    invalid: Array<any>;\n    scale: number;\n    step: number;\n    defaultUnit: string;\n    unitNames: any;\n    units: Array<string>;\n    wholeText: string;\n    fractionText: string;\n    signText: string;\n    protected preset: string;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n    setNewValue(v: string): void;\n    initControl(): void;\n}\nexport declare class MbscMeasurementChild extends MbscMeasurementBase {\n    convert: boolean;\n    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscMeasurement extends MbscMeasurementBase {\n    instance: Measurement;\n    convert: (val: number, unit1: string, unit2: string) => number;\n    options: MbscMeasurementOptions;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscMeasurementComponent extends MbscMeasurement {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscMeasurementOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscTemperature extends MbscMeasurementChild {\n    instance: Temperature;\n    options: MbscTemperatureOptions;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscTemperatureComponent extends MbscTemperature {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscTemperatureOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscDistance extends MbscMeasurementBase {\n    instance: Distance;\n    options: MbscDistanceOptions;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscDistanceComponent extends MbscDistance {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscDistanceOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscSpeed extends MbscMeasurementBase {\n    instance: Speed;\n    options: MbscSpeedOptions;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscSpeedComponent extends MbscSpeed {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscSpeedOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscForce extends MbscMeasurementBase {\n    instance: Force;\n    options: MbscForceOptions;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscForceComponent extends MbscForce {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscForceOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscMass extends MbscMeasurementBase {\n    instance: Mass;\n    options: MbscMassOptions;\n    value: string;\n    onChangeEmitter: EventEmitter<string>;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);\n}\nexport declare class MbscMassComponent extends MbscMass {\n    inputIcon: string;\n    iconAlign: 'left' | 'right';\n    name: string;\n    error: boolean;\n    errorMessage: string;\n    options: MbscMassOptions;\n    placeholder: string;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscMeasurementModule {\n}\n"]}