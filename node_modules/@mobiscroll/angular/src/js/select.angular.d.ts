import { EventEmitter, ElementRef, NgZone, OnInit, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MbscScrollerBase, MbscInputService, MbscOptionsService } from './frameworks/angular';
import { Select, MbscSelectOptions } from './presets/select';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './frameworks/angular';
import * as ɵngcc3 from './input.angular';
export { MbscSelectOptions };
export declare class MbscSelect extends MbscScrollerBase implements OnInit {
    optionService: MbscOptionsService;
    instance: Select;
    counter: boolean;
    data: Array<{
        text?: string;
        value?: any;
        group?: string;
        html?: string;
        disabled?: boolean;
    }> | {
        url: string;
        dataField?: string;
        dataType?: 'json' | 'jsonp';
        processResponse?: (data: any) => Array<{
            text?: string;
            value?: any;
            group?: string;
            html?: string;
            disabled?: boolean;
        }>;
        remoteFilter?: boolean;
    };
    dataText: string;
    dataGroup: string;
    dataValue: string;
    filter: boolean;
    filterPlaceholderText: string;
    filterEmptyText: string;
    group: boolean | {
        header?: boolean;
        groupedWheel?: boolean;
        clustered?: boolean;
    };
    groupLabel: string;
    inputClass: string;
    invalid: Array<any>;
    label: string;
    placeholder: string;
    select: 'single' | 'multiple' | number;
    showInput: boolean;
    onFilter: EventEmitter<{
        filterText: string;
        inst: Select;
    }>;
    options: MbscSelectOptions;
    target: any;
    value: any;
    onChangeEmitter: EventEmitter<any>;
    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    refreshData(newData: any): void;
    initControl(): void;
    protected setElement(): void;
    isMulti: boolean;
    ngOnInit(): void;
    setNewValue(v: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSelect, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscSelect, "[mbsc-select]", ["mobiscroll"], { "value": "mbsc-select"; "counter": "counter"; "data": "mbsc-data"; "dataText": "dataText"; "dataGroup": "dataGroup"; "dataValue": "dataValue"; "filter": "filter"; "filterPlaceholderText": "filterPlaceholderText"; "filterEmptyText": "filterEmptyText"; "group": "group"; "groupLabel": "groupLabel"; "inputClass": "inputClass"; "invalid": "invalid"; "label": "label"; "placeholder": "placeholder"; "select": "select"; "showInput": "showInput"; "options": "mbsc-options"; "target": "mbsc-target"; }, { "onFilter": "onFilter"; "onChangeEmitter": "mbsc-selectChange"; }, never>;
}
export declare class MbscSelectComponent extends MbscSelect {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscSelectOptions;
    data: Array<{
        text?: string;
        value?: any;
        group?: string;
        html?: string;
        disabled?: boolean;
    }> | {
        url: string;
        dataField?: string;
        dataType?: 'json' | 'jsonp';
        processResponse?: (data: any) => Array<{
            text?: string;
            value?: any;
            group?: string;
            html?: string;
            disabled?: boolean;
        }>;
        remoteFilter?: boolean;
    };
    dropdown: boolean;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSelectComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSelectComponent, "mbsc-select", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "data": "data"; "dropdown": "dropdown"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscSelectModule, [typeof MbscSelect, typeof MbscSelectComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscScrollerBaseModule, typeof ɵngcc3.MbscInputModule], [typeof MbscSelect, typeof MbscSelectComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscSelectModule>;
}

//# sourceMappingURL=select.angular.d.ts.map