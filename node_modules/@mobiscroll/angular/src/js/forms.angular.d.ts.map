{"version":3,"file":"forms.angular.d.ts","sources":["forms.angular.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ElementRef, NgZone, QueryList, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { MbscBase, MbscControlBase, Observable, MbscInputService, MbscOptionsService } from './frameworks/angular';\nimport { Form } from './classes/forms';\nimport { TextArea } from './classes/textarea';\nimport { Select } from './classes/select';\nimport { Button } from './classes/button';\nimport { CheckBox } from './classes/checkbox';\nimport { Switch } from './classes/switch';\nimport { Stepper } from './classes/stepper';\nimport { Progress } from './classes/progress';\nimport { Radio } from './classes/radio';\nimport { SegmentedItem } from './classes/segmented';\nimport { Slider } from './classes/slider';\nimport { Rating } from './classes/rating';\nimport { MbscFormOptions } from './classes/forms';\nexport { MbscFormOptions };\nimport { MbscInputBase, MbscFormValueBase, MbscFormBase, MbscInput } from './input.angular';\nexport { MbscInput };\nexport declare class MbscForm extends MbscBase implements OnInit {\n    private _formService;\n    private optionsObj;\n    instance: Form;\n    options: MbscFormOptions;\n    enhance: boolean;\n    context: string | HTMLElement;\n    inputStyle: string;\n    labelStyle: string;\n    rootElem: ElementRef;\n    constructor(initialElem: ElementRef, _formService: MbscOptionsService, zone: NgZone);\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscTextarea extends MbscInputBase {\n    protected _inputService: MbscInputService;\n    instance: TextArea;\n    rows: number | string;\n    wrap: 'hard' | 'soft' | 'off';\n    constructor(initialElem: ElementRef, _formService: MbscOptionsService, _inputService: MbscInputService, _control: NgControl, zone: NgZone);\n    initControl(): void;\n}\nexport declare class MbscDropdown extends MbscFormValueBase {\n    protected _inputService: MbscInputService;\n    instance: Select;\n    label: string;\n    icon: string;\n    iconAlign: string;\n    value: any;\n    inputStyle: string;\n    labelStyle: string;\n    constructor(hostElem: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, control: NgControl, zone: NgZone);\n    initControl(): void;\n    writeValue(v: any): void;\n}\nexport declare class MbscButton extends MbscFormBase {\n    instance: Button;\n    _flat: boolean;\n    _block: boolean;\n    _outline: boolean;\n    _classesObj: any;\n    readonly cssClasses: any;\n    classes: string;\n    type: string;\n    icon: string;\n    flat: any;\n    block: any;\n    outline: any;\n    constructor(hostElem: ElementRef, formService: MbscOptionsService, zone: NgZone);\n    initControl(): void;\n}\nexport declare class MbscCheckbox extends MbscFormValueBase {\n    cdr: ChangeDetectorRef;\n    instance: CheckBox;\n    color: string;\n    inputStyle: string;\n    labelStyle: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    constructor(hostElem: ElementRef, cdr: ChangeDetectorRef, formService: MbscOptionsService, _inputService: MbscInputService, control: NgControl, zone: NgZone);\n    initControl(): void;\n    writeValue(v: any): void;\n}\nexport declare class MbscSwitch extends MbscControlBase implements OnInit {\n    protected _formService: MbscOptionsService;\n    protected _inheritedOptions: any;\n    instance: Switch;\n    options: MbscFormOptions;\n    disabled: boolean;\n    name: string;\n    color: string;\n    error: boolean;\n    errorMessage: string;\n    value: boolean;\n    onChangeEmitter: EventEmitter<boolean>;\n    _initElem: ElementRef;\n    _colorClass: any;\n    readonly colorClass: any;\n    constructor(hostElem: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);\n    setNewValue(v: boolean): void;\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscStepper extends MbscControlBase implements OnInit {\n    protected _formService: MbscOptionsService;\n    protected _inheritedOptions: any;\n    instance: Stepper;\n    _readonly: boolean;\n    readonly: any;\n    options: MbscFormOptions;\n    value: number;\n    name: string;\n    min: number;\n    max: number;\n    step: number;\n    val: string;\n    disabled: boolean;\n    color: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    onChangeEmitter: EventEmitter<number>;\n    _initElem: ElementRef;\n    constructor(hostElement: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);\n    setNewValue(v: number): void;\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscProgress extends MbscControlBase implements OnInit {\n    protected _formService: MbscOptionsService;\n    protected _inheritedOptions: any;\n    instance: Progress;\n    options: MbscFormOptions;\n    value: number;\n    max: number;\n    icon: string;\n    iconAlign: string;\n    val: string;\n    disabled: boolean;\n    stepLabels: Array<number>;\n    readonly dataStepLabels: string | null;\n    color: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    _initElem: ElementRef;\n    constructor(hostElement: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);\n    setNewValue(v: number): void;\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscRadioService {\n    private _name;\n    name: string;\n    private _multiSelect;\n    multiSelect: boolean;\n    private _lastValue;\n    private _valueObservable;\n    onValueChanged(): Observable<any>;\n    changeValue(v: any): void;\n    readonly getLastValue: any;\n    private _color;\n    color: string;\n}\nexport declare class MbscRadioGroupBase extends MbscFormValueBase {\n    _radioService: MbscRadioService;\n    name: string;\n    value: any;\n    valueObserver: number;\n    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, _radioService: MbscRadioService, control: NgControl, zone: NgZone);\n    ngOnInit(): void;\n    writeValue(v: any): void;\n    updateOptions(): void;\n    ngOnDestroy(): void;\n}\nexport declare class MbscRadioGroup extends MbscRadioGroupBase {\n    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, radioService: MbscRadioService, control: NgControl, zone: NgZone);\n}\nexport declare class MbscRadio extends MbscFormBase {\n    private _radioService;\n    instance: Radio;\n    readonly checked: boolean;\n    name: string;\n    modelValue: any;\n    color: string;\n    value: any;\n    error: boolean;\n    errorMessage: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    clicked(e: any): void;\n    valueObserver: number;\n    constructor(hostElement: ElementRef, formService: MbscOptionsService, _radioService: MbscRadioService, zone: NgZone);\n    initControl(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class MbscSegmentedGroup extends MbscRadioGroupBase {\n    select: string;\n    readonly multiSelect: boolean;\n    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, radioService: MbscRadioService, control: NgControl, zone: NgZone);\n    ngOnInit(): void;\n}\nexport declare class MbscSegmented extends MbscFormBase {\n    private _radioService;\n    instance: SegmentedItem;\n    readonly isChecked: boolean;\n    name: string;\n    modelValue: any;\n    multiSelect: boolean;\n    icon: string;\n    value: any;\n    checked: any;\n    checkedChange: EventEmitter<any>;\n    clicked(e: any): void;\n    readonly cssClass: string;\n    valueObserver: number;\n    constructor(hostElement: ElementRef, formService: MbscOptionsService, _radioService: MbscRadioService, zone: NgZone);\n    initControl(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class MbscSlider extends MbscControlBase {\n    private _formService;\n    instance: Slider;\n    _lastValue: any;\n    _dummy: Array<number>;\n    readonly isMulti: boolean;\n    readonly dummyArray: Array<number>;\n    protected _inheritedOptions: any;\n    _needsTimeout: boolean;\n    options: MbscFormOptions;\n    name: string;\n    tooltip: boolean;\n    highlight: boolean;\n    live: boolean;\n    valueTemplate: string;\n    icon: string;\n    val: string;\n    max: number;\n    min: number;\n    step: number;\n    disabled: boolean;\n    stepLabels: string | Array<number>;\n    readonly dataStepLabels: string | null;\n    value: any;\n    color: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    onChangeEmitter: EventEmitter<any>;\n    inputElements: QueryList<ElementRef>;\n    constructor(hostElement: ElementRef, _formService: MbscOptionsService, zone: NgZone, control: NgControl);\n    reInitialize(): void;\n    setNewValue(v: any): void;\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscRating extends MbscControlBase implements OnInit {\n    protected formService: MbscOptionsService;\n    _inheritedOptions: any;\n    instance: Rating;\n    options: MbscFormOptions;\n    name: string;\n    min: number;\n    max: number;\n    step: number;\n    disabled: boolean;\n    empty: string;\n    filled: string;\n    _readonly: boolean;\n    readonly: any;\n    val: 'left' | 'right';\n    template: string;\n    value: number;\n    onChangeEmitter: EventEmitter<number>;\n    color: string;\n    _colorClass: any;\n    readonly colorClass: any;\n    constructor(hostElem: ElementRef, zone: NgZone, formService: MbscOptionsService, control: NgControl);\n    setNewValue(v: number): void;\n    ngOnInit(): void;\n    initControl(): void;\n}\nexport declare class MbscFormGroup implements AfterViewInit {\n    initialElem: ElementRef;\n    collapsible: any;\n    _open: boolean;\n    open: boolean;\n    inset: string;\n    instance: any;\n    element: any;\n    constructor(initialElem: ElementRef);\n    emptyOrTrue(v: any): boolean;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class MbscFormGroupTitle {\n}\nexport declare class MbscFormGroupContent {\n}\nexport declare class MbscAccordion {\n}\nexport declare class MbscFormsModule {\n}\n"]}