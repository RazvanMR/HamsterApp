import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { MbscInputService, MbscOptionsService } from './frameworks/angular';
import { RangePicker, MbscRangeOptions } from './presets/range';
import { MbscCalBase } from './classes/calbase.angular';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './classes/calbase.angular';
import * as ɵngcc3 from './input.angular';
export { MbscRangeOptions };
export declare class MbscRangeStartComponent implements ControlValueAccessor {
    host: ElementRef;
    parent: MbscRangeComponent;
    zone: NgZone;
    control: NgControl;
    theme: string;
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    disabled: boolean;
    placeholder: string;
    readonly element: any;
    rangeIndex: 0 | 1;
    oldAccessor: any;
    constructor(host: ElementRef, parent: MbscRangeComponent, zone: NgZone, control: NgControl);
    checkAccessor(): void;
    handleChange(): void;
    ngAfterViewInit(): void;
    onChange: any;
    onTouch: any;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    initialSet: boolean;
    writeValue(v: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRangeStartComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRangeStartComponent, "mbsc-range-start", never, { "errorMessage": "errorMessage"; "placeholder": "placeholder"; "disabled": "disabled"; "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; }, {}, never, ["*"]>;
}
export declare class MbscRangeEndComponent extends MbscRangeStartComponent {
    rangeIndex: 0 | 1;
    constructor(el: ElementRef, parent: MbscRangeComponent, zone: NgZone, control: NgControl);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRangeEndComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRangeEndComponent, "mbsc-range-end", never, {}, {}, never, ["*"]>;
}
export declare class MbscRange extends MbscCalBase {
    optionService: MbscOptionsService;
    _wrapper: boolean;
    instance: RangePicker;
    _startInput: string | HTMLElement;
    _endInput: string | HTMLElement;
    autoCorrect: boolean;
    controls?: Array<'time' | 'date' | 'calendar'>;
    endInput: string | HTMLElement;
    maxRange: number;
    minRange: number;
    showSelector: boolean;
    startInput: string | HTMLElement;
    fromText: string;
    toText: string;
    onSetDate: EventEmitter<{
        date: Date;
        active: 'start' | 'end';
        control: 'calendar' | 'date' | 'time';
        inst: any;
    }>;
    onCellHoverIn: EventEmitter<{
        date: Date;
        marked?: any;
        selected?: 'start' | 'end';
        target: HTMLElement;
        inst: any;
    }>;
    onCellHoverOut: EventEmitter<{
        date: Date;
        marked?: any;
        selected?: 'start' | 'end';
        target: HTMLElement;
        inst: any;
    }>;
    onDayChange: EventEmitter<{
        date: Date;
        marked?: any;
        selected?: 'start' | 'end';
        target: HTMLElement;
        inst: any;
    }>;
    start: MbscRangeStartComponent;
    end: MbscRangeEndComponent;
    options: MbscRangeOptions;
    value: Array<any>;
    onChangeEmitter: EventEmitter<Array<any>>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: Array<any>): void;
    readonly optionExtensions: any;
    initControl(): void;
    ngAfterContentInit(): void;
    handleChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRange, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscRange, "[mbsc-range]", ["mobiscroll"], { "endInput": "endInput"; "startInput": "startInput"; "value": "mbsc-range"; "autoCorrect": "autoCorrect"; "controls": "controls"; "maxRange": "maxRange"; "minRange": "minRange"; "showSelector": "showSelector"; "fromText": "fromText"; "toText": "toText"; "options": "mbsc-options"; }, { "onSetDate": "onSetDate"; "onCellHoverIn": "onCellHoverIn"; "onCellHoverOut": "onCellHoverOut"; "onDayChange": "onDayChange"; "onChangeEmitter": "mbsc-rangeChange"; }, ["start", "end"]>;
}
export declare class MbscRangeComponent extends MbscRange {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscRangeOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRangeComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRangeComponent, "mbsc-range", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["mbsc-range-start", "mbsc-range-end", "*"]>;
}
export declare class MbscRangeModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscRangeModule, [typeof MbscRangeStartComponent, typeof MbscRangeEndComponent, typeof MbscRange, typeof MbscRangeComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscCalBaseModule, typeof ɵngcc3.MbscInputModule], [typeof MbscRangeStartComponent, typeof MbscRangeEndComponent, typeof MbscRange, typeof MbscRangeComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscRangeModule>;
}

//# sourceMappingURL=range.angular.d.ts.map