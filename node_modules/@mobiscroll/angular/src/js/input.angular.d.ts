import { OnInit, EventEmitter, ElementRef, NgZone } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
import { MbscOptionsService, MbscInputService, MbscBase } from './frameworks/angular';
import { Input as FormInput, MbscFormOptions } from './classes/input';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './frameworks/angular';
export declare class MbscFormBase extends MbscBase implements OnInit {
    protected _formService: MbscOptionsService;
    protected _inheritedOptions: any;
    color: string;
    options: MbscFormOptions;
    disabled: boolean;
    name: string;
    _initElem: ElementRef;
    constructor(hostElem: ElementRef, _formService: MbscOptionsService, zone: NgZone);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscFormBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscFormBase, "[mbsc-f-b]", never, { "color": "color"; "options": "options"; "disabled": "disabled"; "name": "name"; }, {}, never>;
}
export declare class MbscFormValueBase extends MbscFormBase implements ControlValueAccessor {
    protected _control: NgControl;
    _value: any;
    _readonly: boolean;
    _needRefresh: any;
    readonly: any;
    innerValue: any;
    onChange: (value: any) => any;
    onTouch: (ev?: any) => any;
    value: any;
    error: boolean;
    errorMessage: string;
    valueChangeEmitter: EventEmitter<string>;
    constructor(hostElem: ElementRef, _formService: MbscOptionsService, _inputService: MbscInputService, _control: NgControl, zone: NgZone);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(v: any): void;
    refresh(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscFormValueBase, [null, { optional: true; }, { optional: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscFormValueBase, "[mbsc-fv-b]", never, { "readonly": "readonly"; "value": "value"; "error": "error"; "errorMessage": "errorMessage"; }, { "valueChangeEmitter": "valueChange"; }, never>;
}
export declare class MbscInputBase extends MbscFormValueBase {
    autocomplete: 'on' | 'off';
    autocapitalize: string;
    autocorrect: string;
    spellcheck: string;
    autofocus: string;
    minlength: number;
    maxlength: number;
    required: string;
    icon: string;
    iconAlign: string;
    type: string;
    passwordToggle: boolean;
    iconShow: string;
    iconHide: string;
    iconUpload: boolean;
    inputStyle: string;
    labelStyle: string;
    placeholder: string;
    constructor(initialElem: ElementRef, _formService: MbscOptionsService, _inputService: MbscInputService, _control: NgControl, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscInputBase, [null, { optional: true; }, { optional: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscInputBase, "[mbsc-i-b]", never, { "autocomplete": "autocomplete"; "autocapitalize": "autocapitalize"; "autocorrect": "autocorrect"; "spellcheck": "spellcheck"; "autofocus": "autofocus"; "minlength": "minlength"; "maxlength": "maxlength"; "required": "required"; "icon": "icon"; "iconAlign": "icon-align"; "type": "type"; "passwordToggle": "password-toggle"; "iconShow": "icon-show"; "iconHide": "icon-hide"; "iconUpload": "icon-upload"; "inputStyle": "input-style"; "labelStyle": "label-style"; "placeholder": "placeholder"; }, {}, never>;
}
export declare class MbscInput extends MbscInputBase {
    protected _inputService: MbscInputService;
    instance: FormInput;
    min: number;
    max: number;
    step: number;
    pattern: string;
    accept: string;
    multiple: string;
    controlNg: boolean;
    dropdown: boolean;
    constructor(initialElem: ElementRef, _formService: MbscOptionsService, _inputService: MbscInputService, _control: NgControl, zone: NgZone);
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscInput, [null, { optional: true; }, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscInput, "mbsc-input", never, { "min": "min"; "max": "max"; "step": "step"; "pattern": "pattern"; "accept": "accept"; "multiple": "multiple"; "controlNg": "controlNg"; "dropdown": "dropdown"; }, {}, never, ["*"]>;
}
export declare class MbscInputModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscInputModule, [typeof MbscInput, typeof MbscInputBase, typeof MbscFormBase, typeof MbscFormValueBase], [typeof ɵngcc1.FormsModule, typeof ɵngcc2.CommonModule, typeof ɵngcc3.MbscBaseModule], [typeof MbscInput]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscInputModule>;
}

//# sourceMappingURL=input.angular.d.ts.map