import { EventEmitter, ElementRef, NgZone, QueryList, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MbscBase, MbscControlBase, Observable, MbscInputService, MbscOptionsService } from './frameworks/angular';
import { Form } from './classes/forms';
import { TextArea } from './classes/textarea';
import { Select } from './classes/select';
import { Button } from './classes/button';
import { CheckBox } from './classes/checkbox';
import { Switch } from './classes/switch';
import { Stepper } from './classes/stepper';
import { Progress } from './classes/progress';
import { Radio } from './classes/radio';
import { SegmentedItem } from './classes/segmented';
import { Slider } from './classes/slider';
import { Rating } from './classes/rating';
import { MbscFormOptions } from './classes/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './frameworks/angular';
import * as ɵngcc4 from './input.angular';
export { MbscFormOptions };
import { MbscInputBase, MbscFormValueBase, MbscFormBase, MbscInput } from './input.angular';
export { MbscInput };
export declare class MbscForm extends MbscBase implements OnInit {
    private _formService;
    private optionsObj;
    instance: Form;
    options: MbscFormOptions;
    enhance: boolean;
    context: string | HTMLElement;
    inputStyle: string;
    labelStyle: string;
    rootElem: ElementRef;
    constructor(initialElem: ElementRef, _formService: MbscOptionsService, zone: NgZone);
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscForm, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscForm, "mbsc-form", ["mobiscroll"], { "options": "options"; "enhance": "enhance"; "context": "context"; "inputStyle": "input-style"; "labelStyle": "label-style"; }, {}, never, ["*"]>;
}
export declare class MbscTextarea extends MbscInputBase {
    protected _inputService: MbscInputService;
    instance: TextArea;
    rows: number | string;
    wrap: 'hard' | 'soft' | 'off';
    constructor(initialElem: ElementRef, _formService: MbscOptionsService, _inputService: MbscInputService, _control: NgControl, zone: NgZone);
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTextarea, [null, { optional: true; }, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscTextarea, "mbsc-textarea", never, { "rows": "rows"; "wrap": "wrap"; }, {}, never, ["*"]>;
}
export declare class MbscDropdown extends MbscFormValueBase {
    protected _inputService: MbscInputService;
    instance: Select;
    label: string;
    icon: string;
    iconAlign: string;
    value: any;
    inputStyle: string;
    labelStyle: string;
    constructor(hostElem: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, control: NgControl, zone: NgZone);
    initControl(): void;
    writeValue(v: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscDropdown, [null, { optional: true; }, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscDropdown, "mbsc-dropdown", never, { "value": "value"; "label": "label"; "icon": "icon"; "iconAlign": "icon-align"; "inputStyle": "input-style"; "labelStyle": "label-style"; }, {}, never, ["*"]>;
}
export declare class MbscButton extends MbscFormBase {
    instance: Button;
    _flat: boolean;
    _block: boolean;
    _outline: boolean;
    _classesObj: any;
    readonly cssClasses: any;
    classes: string;
    type: string;
    icon: string;
    flat: any;
    block: any;
    outline: any;
    constructor(hostElem: ElementRef, formService: MbscOptionsService, zone: NgZone);
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscButton, [null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscButton, "mbsc-button", never, { "flat": "flat"; "block": "block"; "outline": "outline"; "classes": "class"; "type": "type"; "icon": "icon"; }, {}, never, ["*"]>;
}
export declare class MbscCheckbox extends MbscFormValueBase {
    cdr: ChangeDetectorRef;
    instance: CheckBox;
    color: string;
    inputStyle: string;
    labelStyle: string;
    _colorClass: any;
    readonly colorClass: any;
    constructor(hostElem: ElementRef, cdr: ChangeDetectorRef, formService: MbscOptionsService, _inputService: MbscInputService, control: NgControl, zone: NgZone);
    initControl(): void;
    writeValue(v: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscCheckbox, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscCheckbox, "mbsc-checkbox", never, { "color": "color"; "inputStyle": "input-style"; "labelStyle": "label-style"; }, {}, never, ["*"]>;
}
export declare class MbscSwitch extends MbscControlBase implements OnInit {
    protected _formService: MbscOptionsService;
    protected _inheritedOptions: any;
    instance: Switch;
    options: MbscFormOptions;
    disabled: boolean;
    name: string;
    color: string;
    error: boolean;
    errorMessage: string;
    value: boolean;
    onChangeEmitter: EventEmitter<boolean>;
    _initElem: ElementRef;
    _colorClass: any;
    readonly colorClass: any;
    constructor(hostElem: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);
    setNewValue(v: boolean): void;
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSwitch, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSwitch, "mbsc-switch", ["mobiscroll"], { "value": "value"; "options": "options"; "disabled": "disabled"; "name": "name"; "color": "color"; "error": "error"; "errorMessage": "errorMessage"; }, { "onChangeEmitter": "valueChange"; }, never, ["*"]>;
}
export declare class MbscStepper extends MbscControlBase implements OnInit {
    protected _formService: MbscOptionsService;
    protected _inheritedOptions: any;
    instance: Stepper;
    _readonly: boolean;
    readonly: any;
    options: MbscFormOptions;
    value: number;
    name: string;
    min: number;
    max: number;
    step: number;
    val: string;
    disabled: boolean;
    color: string;
    _colorClass: any;
    readonly colorClass: any;
    onChangeEmitter: EventEmitter<number>;
    _initElem: ElementRef;
    constructor(hostElement: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);
    setNewValue(v: number): void;
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscStepper, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscStepper, "mbsc-stepper", ["mobiscroll"], { "readonly": "readonly"; "value": "value"; "options": "options"; "name": "name"; "min": "min"; "max": "max"; "step": "step"; "val": "val"; "disabled": "disabled"; "color": "color"; }, { "onChangeEmitter": "valueChange"; }, never, ["*"]>;
}
export declare class MbscProgress extends MbscControlBase implements OnInit {
    protected _formService: MbscOptionsService;
    protected _inheritedOptions: any;
    instance: Progress;
    options: MbscFormOptions;
    value: number;
    max: number;
    icon: string;
    iconAlign: string;
    val: string;
    disabled: boolean;
    stepLabels: Array<number>;
    readonly dataStepLabels: string | null;
    color: string;
    _colorClass: any;
    readonly colorClass: any;
    _initElem: ElementRef;
    constructor(hostElement: ElementRef, zone: NgZone, _formService: MbscOptionsService, control: NgControl);
    setNewValue(v: number): void;
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscProgress, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscProgress, "mbsc-progress", ["mobiscroll"], { "value": "value"; "options": "options"; "max": "max"; "icon": "icon"; "iconAlign": "icon-align"; "val": "val"; "disabled": "disabled"; "stepLabels": "step-labels"; "color": "color"; }, {}, never, ["*"]>;
}
export declare class MbscRadioService {
    private _name;
    name: string;
    private _multiSelect;
    multiSelect: boolean;
    private _lastValue;
    private _valueObservable;
    onValueChanged(): Observable<any>;
    changeValue(v: any): void;
    readonly getLastValue: any;
    private _color;
    color: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRadioService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MbscRadioService>;
}
export declare class MbscRadioGroupBase extends MbscFormValueBase {
    _radioService: MbscRadioService;
    name: string;
    value: any;
    valueObserver: number;
    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, _radioService: MbscRadioService, control: NgControl, zone: NgZone);
    ngOnInit(): void;
    writeValue(v: any): void;
    updateOptions(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRadioGroupBase, [null, { optional: true; }, { optional: true; }, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscRadioGroupBase, "[mbsc-rg-b]", never, { "value": "value"; "name": "name"; }, {}, never>;
}
export declare class MbscRadioGroup extends MbscRadioGroupBase {
    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, radioService: MbscRadioService, control: NgControl, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRadioGroup, [null, { optional: true; }, { optional: true; }, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRadioGroup, "mbsc-radio-group", never, {}, {}, never, ["*"]>;
}
export declare class MbscRadio extends MbscFormBase {
    private _radioService;
    instance: Radio;
    readonly checked: boolean;
    name: string;
    modelValue: any;
    color: string;
    value: any;
    error: boolean;
    errorMessage: string;
    _colorClass: any;
    readonly colorClass: any;
    clicked(e: any): void;
    valueObserver: number;
    constructor(hostElement: ElementRef, formService: MbscOptionsService, _radioService: MbscRadioService, zone: NgZone);
    initControl(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRadio, [null, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRadio, "mbsc-radio", never, { "value": "value"; "error": "error"; "errorMessage": "errorMessage"; }, {}, never, ["*"]>;
}
export declare class MbscSegmentedGroup extends MbscRadioGroupBase {
    select: string;
    readonly multiSelect: boolean;
    constructor(hostElement: ElementRef, formService: MbscOptionsService, _inputService: MbscInputService, radioService: MbscRadioService, control: NgControl, zone: NgZone);
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSegmentedGroup, [null, { optional: true; }, { optional: true; }, null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSegmentedGroup, "mbsc-segmented-group", never, { "select": "select"; }, {}, never, ["*"]>;
}
export declare class MbscSegmented extends MbscFormBase {
    private _radioService;
    instance: SegmentedItem;
    readonly isChecked: boolean;
    name: string;
    modelValue: any;
    multiSelect: boolean;
    icon: string;
    value: any;
    checked: any;
    checkedChange: EventEmitter<any>;
    clicked(e: any): void;
    readonly cssClass: string;
    valueObserver: number;
    constructor(hostElement: ElementRef, formService: MbscOptionsService, _radioService: MbscRadioService, zone: NgZone);
    initControl(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSegmented, [null, { optional: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSegmented, "mbsc-segmented", never, { "icon": "icon"; "value": "value"; "checked": "checked"; }, { "checkedChange": "checkedChange"; }, never, ["*"]>;
}
export declare class MbscSlider extends MbscControlBase {
    private _formService;
    instance: Slider;
    _lastValue: any;
    _dummy: Array<number>;
    readonly isMulti: boolean;
    readonly dummyArray: Array<number>;
    protected _inheritedOptions: any;
    _needsTimeout: boolean;
    options: MbscFormOptions;
    name: string;
    tooltip: boolean;
    highlight: boolean;
    live: boolean;
    valueTemplate: string;
    icon: string;
    val: string;
    max: number;
    min: number;
    step: number;
    disabled: boolean;
    stepLabels: string | Array<number>;
    readonly dataStepLabels: string | null;
    value: any;
    color: string;
    _colorClass: any;
    readonly colorClass: any;
    onChangeEmitter: EventEmitter<any>;
    inputElements: QueryList<ElementRef>;
    constructor(hostElement: ElementRef, _formService: MbscOptionsService, zone: NgZone, control: NgControl);
    reInitialize(): void;
    setNewValue(v: any): void;
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSlider, [null, { optional: true; }, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSlider, "mbsc-slider", ["mobiscroll"], { "value": "value"; "options": "options"; "name": "name"; "tooltip": "tooltip"; "highlight": "highlight"; "live": "live"; "valueTemplate": "value-template"; "icon": "icon"; "val": "val"; "max": "max"; "min": "min"; "step": "step"; "disabled": "disabled"; "stepLabels": "step-labels"; "color": "color"; }, { "onChangeEmitter": "valueChange"; }, never, ["*"]>;
}
export declare class MbscRating extends MbscControlBase implements OnInit {
    protected formService: MbscOptionsService;
    _inheritedOptions: any;
    instance: Rating;
    options: MbscFormOptions;
    name: string;
    min: number;
    max: number;
    step: number;
    disabled: boolean;
    empty: string;
    filled: string;
    _readonly: boolean;
    readonly: any;
    val: 'left' | 'right';
    template: string;
    value: number;
    onChangeEmitter: EventEmitter<number>;
    color: string;
    _colorClass: any;
    readonly colorClass: any;
    constructor(hostElem: ElementRef, zone: NgZone, formService: MbscOptionsService, control: NgControl);
    setNewValue(v: number): void;
    ngOnInit(): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscRating, [null, null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscRating, "mbsc-rating", never, { "readonly": "readonly"; "value": "value"; "options": "options"; "name": "name"; "min": "min"; "max": "max"; "step": "step"; "disabled": "disabled"; "empty": "empty"; "filled": "filled"; "val": "val"; "template": "template"; "color": "color"; }, { "onChangeEmitter": "valueChange"; }, never, ["*"]>;
}
export declare class MbscFormGroup implements AfterViewInit {
    initialElem: ElementRef;
    collapsible: any;
    _open: boolean;
    open: boolean;
    inset: string;
    instance: any;
    element: any;
    constructor(initialElem: ElementRef);
    emptyOrTrue(v: any): boolean;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscFormGroup, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscFormGroup, "mbsc-form-group", never, { "collapsible": "collapsible"; "open": "open"; "inset": "inset"; }, {}, never, ["*"]>;
}
export declare class MbscFormGroupTitle {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscFormGroupTitle, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscFormGroupTitle, "mbsc-form-group-title", never, {}, {}, never, ["*"]>;
}
export declare class MbscFormGroupContent {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscFormGroupContent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscFormGroupContent, "mbsc-form-group-content", never, {}, {}, never, ["*"]>;
}
export declare class MbscAccordion {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscAccordion, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscAccordion, "mbsc-accordion", never, {}, {}, never, ["*"]>;
}
export declare class MbscFormsModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscFormsModule, [typeof MbscForm, typeof MbscTextarea, typeof MbscDropdown, typeof MbscButton, typeof MbscCheckbox, typeof MbscSwitch, typeof MbscStepper, typeof MbscProgress, typeof MbscRadioGroup, typeof MbscRadioGroupBase, typeof MbscRadio, typeof MbscSegmentedGroup, typeof MbscSegmented, typeof MbscSlider, typeof MbscRating, typeof MbscFormGroup, typeof MbscFormGroupTitle, typeof MbscFormGroupContent, typeof MbscAccordion], [typeof ɵngcc1.FormsModule, typeof ɵngcc2.CommonModule, typeof ɵngcc3.MbscBaseModule, typeof ɵngcc4.MbscInputModule], [typeof MbscForm, typeof MbscTextarea, typeof MbscDropdown, typeof MbscButton, typeof MbscCheckbox, typeof MbscSwitch, typeof MbscStepper, typeof MbscProgress, typeof MbscRadioGroup, typeof MbscRadioGroupBase, typeof MbscRadio, typeof MbscSegmentedGroup, typeof MbscSegmented, typeof MbscSlider, typeof MbscRating, typeof MbscFormGroup, typeof MbscFormGroupTitle, typeof MbscFormGroupContent, typeof MbscAccordion, typeof ɵngcc4.MbscInputModule, typeof ɵngcc4.MbscInput]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscFormsModule>;
}

//# sourceMappingURL=forms.angular.d.ts.map