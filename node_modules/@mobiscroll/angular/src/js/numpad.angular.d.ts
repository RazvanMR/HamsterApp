import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MbscFrameBase, MbscInputService, MbscOptionsService } from './frameworks/angular';
import { Numpad, MbscNumpadOptions, MbscNumpadDateOptions, MbscNumpadTimeOptions, MbscNumpadDecimalOptions, MbscNumpadTimespanOptions } from './classes/numpad';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './frameworks/angular';
import * as ɵngcc3 from './input.angular';
export { MbscNumpadOptions, MbscNumpadDateOptions, MbscNumpadTimeOptions, MbscNumpadDecimalOptions, MbscNumpadTimespanOptions };
export declare class MbscNumpadBase extends MbscFrameBase {
    optionService: MbscOptionsService;
    instance: Numpad;
    allowLeadingZero: boolean;
    deleteIcon: string;
    fill: 'ltr' | 'rtl';
    leftKey: {
        text: string;
        variable?: string;
        value?: string;
        keys?: number[];
    };
    mask: string;
    placeholderChar: string;
    rightKey: {
        text: string;
        variable?: string;
        value?: string;
        keys?: number[];
    };
    template: string;
    validate: (data: {
        values: Array<any>;
        variables: any;
    }, inst: any) => ({
        disabled: Array<any>;
        invalid: boolean;
    });
    onSet: EventEmitter<{
        valueText: string;
        inst: any;
    }>;
    onClear: EventEmitter<{
        inst: any;
    }>;
    onInput: EventEmitter<{
        domEvent: any;
        target: any;
        values: Array<any>;
        valueText: string;
        variables: any;
        inst: any;
    }>;
    cancelText: string;
    clearText: string;
    setText: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadBase, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpadBase, "[mbsc-n-b]", never, { "allowLeadingZero": "allowLeadingZero"; "deleteIcon": "deleteIcon"; "fill": "fill"; "leftKey": "leftKey"; "mask": "mask"; "placeholderChar": "char-placeholder"; "rightKey": "rightKey"; "template": "template"; "validate": "validate"; "cancelText": "cancelText"; "clearText": "clearText"; "setText": "setText"; }, { "onSet": "onSet"; "onClear": "onClear"; "onInput": "onInput"; }, never>;
}
export declare class MbscNumpad extends MbscNumpadBase {
    options: MbscNumpadOptions;
    protected preset: string;
    value: any;
    onChangeEmitter: EventEmitter<any>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: any): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpad, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpad, "[mbsc-numpad]", ["mobiscroll"], { "value": "mbsc-numpad"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-numpadChange"; }, never>;
}
export declare class MbscNumpadComponent extends MbscNumpad {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscNumpadOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNumpadComponent, "mbsc-numpad", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscNumpadDecimal extends MbscNumpad {
    value: any;
    decimalSeparator: string;
    defaultValue: number;
    entryMode: 'template' | 'freeform';
    invalid: Array<any>;
    scale: number;
    maxScale: number;
    min: number;
    max: number;
    prefix: string;
    returnAffix: boolean;
    suffix: string;
    thousandsSeparator: string;
    options: MbscNumpadDecimalOptions;
    onChangeEmitter: EventEmitter<number>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadDecimal, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpadDecimal, "[mbsc-numpad-decimal]", ["mobiscroll"], { "value": "mbsc-numpad-decimal"; "decimalSeparator": "decimalSeparator"; "defaultValue": "defaultValue"; "entryMode": "entryMode"; "invalid": "invalid"; "scale": "scale"; "maxScale": "maxScale"; "min": "min"; "max": "max"; "prefix": "prefix"; "returnAffix": "returnAffix"; "suffix": "suffix"; "thousandsSeparator": "thousandsSeparator"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-numpad-decimalChange"; }, never>;
}
export declare class MbscNumpadDecimalComponent extends MbscNumpadDecimal {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscNumpadDecimalOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadDecimalComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNumpadDecimalComponent, "mbsc-numpad-decimal", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscNumpadDate extends MbscNumpadBase {
    value: Date | '';
    dateFormat: string;
    dateOrder: string;
    delimiter: string;
    defaultValue: string;
    invalid: Array<any>;
    min: Date;
    max: Date;
    options: MbscNumpadDateOptions;
    onChangeEmitter: EventEmitter<Date>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: Date): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadDate, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpadDate, "[mbsc-numpad-date]", ["mobiscroll"], { "value": "mbsc-numpad-date"; "dateFormat": "dateFormat"; "dateOrder": "dateOrder"; "delimiter": "delimiter"; "defaultValue": "defaultValue"; "invalid": "invalid"; "min": "min"; "max": "max"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-numpad-dateChange"; }, never>;
}
export declare class MbscNumpadDateComponent extends MbscNumpadDate {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscNumpadDateOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadDateComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNumpadDateComponent, "mbsc-numpad-date", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscNumpadTime extends MbscNumpadBase {
    value: string;
    defaultValue: string;
    invalid: Array<any>;
    max: Date;
    min: Date;
    timeFormat: string;
    options: MbscNumpadTimeOptions;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: string): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadTime, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpadTime, "[mbsc-numpad-time]", ["mobiscroll"], { "value": "mbsc-numpad-time"; "defaultValue": "defaultValue"; "invalid": "invalid"; "max": "max"; "min": "min"; "timeFormat": "timeFormat"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-numpad-timeChange"; }, never>;
}
export declare class MbscNumpadTimeComponent extends MbscNumpadTime {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscNumpadTimeOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadTimeComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNumpadTimeComponent, "mbsc-numpad-time", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscNumpadTimespan extends MbscNumpad {
    value: number | '';
    defaultValue: number;
    invalid: Array<any>;
    min: number;
    max: number;
    options: MbscNumpadTimespanOptions;
    onChangeEmitter: EventEmitter<number>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadTimespan, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscNumpadTimespan, "[mbsc-numpad-timespan]", ["mobiscroll"], { "value": "mbsc-numpad-timespan"; "defaultValue": "defaultValue"; "invalid": "invalid"; "min": "min"; "max": "max"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-numpad-timespanChange"; }, never>;
}
export declare class MbscNumpadTimespanComponent extends MbscNumpadTimespan {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscNumpadTimespanOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNumpadTimespanComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNumpadTimespanComponent, "mbsc-numpad-timespan", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscNumpadModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscNumpadModule, [typeof MbscNumpad, typeof MbscNumpadBase, typeof MbscNumpadComponent, typeof MbscNumpadDecimal, typeof MbscNumpadDecimalComponent, typeof MbscNumpadDate, typeof MbscNumpadDateComponent, typeof MbscNumpadTime, typeof MbscNumpadTimeComponent, typeof MbscNumpadTimespan, typeof MbscNumpadTimespanComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscFrameBaseModule, typeof ɵngcc3.MbscInputModule], [typeof MbscNumpad, typeof MbscNumpadBase, typeof MbscNumpadComponent, typeof MbscNumpadDecimal, typeof MbscNumpadDecimalComponent, typeof MbscNumpadDate, typeof MbscNumpadDateComponent, typeof MbscNumpadTime, typeof MbscNumpadTimeComponent, typeof MbscNumpadTimespan, typeof MbscNumpadTimespanComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscNumpadModule>;
}

//# sourceMappingURL=numpad.angular.d.ts.map