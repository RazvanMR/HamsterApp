{"version":3,"file":"popup.angular.d.ts","sources":["popup.angular.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, NgZone } from '@angular/core';\nimport { MbscBase, MbscOptionsService } from './frameworks/angular';\nimport { Popup, MbscPopupOptions, MbscWidgetOptions } from './classes/popup';\nexport { MbscPopupOptions };\nexport { MbscWidgetOptions };\nexport declare class MbscPopup extends MbscBase {\n    optionService: MbscOptionsService;\n    instance: Popup;\n    options: MbscPopupOptions;\n    anchor?: string | HTMLElement;\n    animate?: boolean | 'fade' | 'flip' | 'pop' | 'swing' | 'slidevertical' | 'slidehorizontal' | 'slidedown' | 'slideup';\n    buttons?: Array<any>;\n    closeOnOverlayTap?: boolean;\n    context?: string | HTMLElement;\n    disabled?: boolean;\n    display?: 'top' | 'bottom' | 'bubble' | 'inline' | 'center';\n    focusOnClose?: boolean | string | HTMLElement;\n    focusTrap?: boolean;\n    headerText?: string | boolean | ((formattedValue: string) => string);\n    showOnFocus?: boolean;\n    showOnTap?: boolean;\n    touchUi?: boolean;\n    okText: string;\n    cancelText: string;\n    onBeforeClose: EventEmitter<{\n        valueText: string;\n        button: string;\n        inst: any;\n    }>;\n    onBeforeShow: EventEmitter<{\n        inst: any;\n    }>;\n    onCancel: EventEmitter<{\n        valueText: string;\n        inst: any;\n    }>;\n    onClose: EventEmitter<{\n        valueText: string;\n        inst: any;\n    }>;\n    onDestroy: EventEmitter<{\n        inst: any;\n    }>;\n    onFill: EventEmitter<{\n        inst: any;\n    }>;\n    onMarkupReady: EventEmitter<{\n        target: HTMLElement;\n        inst: any;\n    }>;\n    onPosition: EventEmitter<{\n        target: HTMLElement;\n        windowWidth: number;\n        windowHeight: number;\n        inst: any;\n    }>;\n    onShow: EventEmitter<{\n        target: HTMLElement;\n        valueText: string;\n        inst: any;\n    }>;\n    onSet: EventEmitter<{\n        valueText?: string;\n        inst: any;\n    }>;\n    constructor(initialElem: ElementRef, optionService: MbscOptionsService, zone: NgZone);\n    ngAfterViewInit(): void;\n}\nexport declare class MbscWidget extends MbscPopup {\n}\nexport declare class MbscPopupModule {\n}\n"]}