import { EventEmitter, ElementRef, NgZone } from '@angular/core';
import { MbscBase, MbscOptionsService } from './frameworks/angular';
import { Popup, MbscPopupOptions, MbscWidgetOptions } from './classes/popup';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './frameworks/angular';
export { MbscPopupOptions };
export { MbscWidgetOptions };
export declare class MbscPopup extends MbscBase {
    optionService: MbscOptionsService;
    instance: Popup;
    options: MbscPopupOptions;
    anchor?: string | HTMLElement;
    animate?: boolean | 'fade' | 'flip' | 'pop' | 'swing' | 'slidevertical' | 'slidehorizontal' | 'slidedown' | 'slideup';
    buttons?: Array<any>;
    closeOnOverlayTap?: boolean;
    context?: string | HTMLElement;
    disabled?: boolean;
    display?: 'top' | 'bottom' | 'bubble' | 'inline' | 'center';
    focusOnClose?: boolean | string | HTMLElement;
    focusTrap?: boolean;
    headerText?: string | boolean | ((formattedValue: string) => string);
    showOnFocus?: boolean;
    showOnTap?: boolean;
    touchUi?: boolean;
    okText: string;
    cancelText: string;
    onBeforeClose: EventEmitter<{
        valueText: string;
        button: string;
        inst: any;
    }>;
    onBeforeShow: EventEmitter<{
        inst: any;
    }>;
    onCancel: EventEmitter<{
        valueText: string;
        inst: any;
    }>;
    onClose: EventEmitter<{
        valueText: string;
        inst: any;
    }>;
    onDestroy: EventEmitter<{
        inst: any;
    }>;
    onFill: EventEmitter<{
        inst: any;
    }>;
    onMarkupReady: EventEmitter<{
        target: HTMLElement;
        inst: any;
    }>;
    onPosition: EventEmitter<{
        target: HTMLElement;
        windowWidth: number;
        windowHeight: number;
        inst: any;
    }>;
    onShow: EventEmitter<{
        target: HTMLElement;
        valueText: string;
        inst: any;
    }>;
    onSet: EventEmitter<{
        valueText?: string;
        inst: any;
    }>;
    constructor(initialElem: ElementRef, optionService: MbscOptionsService, zone: NgZone);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscPopup, [null, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscPopup, "mbsc-popup", ["mobiscroll"], { "options": "options"; "anchor": "anchor"; "animate": "animate"; "buttons": "buttons"; "closeOnOverlayTap": "closeOnOverlayTap"; "context": "context"; "disabled": "disabled"; "display": "display"; "focusOnClose": "focusOnClose"; "focusTrap": "focusTrap"; "headerText": "headerText"; "showOnFocus": "showOnFocus"; "showOnTap": "showOnTap"; "touchUi": "touchUi"; "okText": "okText"; "cancelText": "cancelText"; }, { "onBeforeClose": "onBeforeClose"; "onBeforeShow": "onBeforeShow"; "onCancel": "onCancel"; "onClose": "onClose"; "onDestroy": "onDestroy"; "onFill": "onFill"; "onMarkupReady": "onMarkupReady"; "onPosition": "onPosition"; "onShow": "onShow"; "onSet": "onSet"; }, never, ["*"]>;
}
export declare class MbscWidget extends MbscPopup {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscWidget, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscWidget, "mbsc-widget", ["mobiscroll"], {}, {}, never, ["*"]>;
}
export declare class MbscPopupModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscPopupModule, [typeof MbscPopup, typeof MbscWidget], [typeof ɵngcc1.MbscBaseModule], [typeof MbscPopup, typeof MbscWidget]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscPopupModule>;
}

//# sourceMappingURL=popup.angular.d.ts.map