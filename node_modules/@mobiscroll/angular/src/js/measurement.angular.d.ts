import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MbscScrollerBase, MbscInputService, MbscOptionsService } from './frameworks/angular';
import './presets/temperature';
import './presets/distance';
import './presets/speed';
import './presets/force';
import './presets/mass';
import { MbscMeasurementOptions, Measurement } from './presets/measurement';
import { Temperature, MbscTemperatureOptions } from './presets/temperature';
import { Distance, MbscDistanceOptions } from './presets/distance';
import { Speed, MbscSpeedOptions } from './presets/speed';
import { Mass, MbscMassOptions } from './presets/mass';
import { Force, MbscForceOptions } from './presets/force';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './frameworks/angular';
import * as ɵngcc3 from './input.angular';
export { MbscMeasurementOptions, MbscTemperatureOptions, MbscDistanceOptions, MbscSpeedOptions, MbscMassOptions, MbscForceOptions };
export declare class MbscMeasurementBase extends MbscScrollerBase {
    optionService: MbscOptionsService;
    max: number;
    min: number;
    decimalSeparator: string;
    defaultValue: string;
    invalid: Array<any>;
    scale: number;
    step: number;
    defaultUnit: string;
    unitNames: any;
    units: Array<string>;
    wholeText: string;
    fractionText: string;
    signText: string;
    protected preset: string;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    setNewValue(v: string): void;
    initControl(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMeasurementBase, [null, null, null, null, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscMeasurementBase, "[mbsc-m-b]", never, { "value": "mbsc-measurement"; "max": "max"; "min": "min"; "decimalSeparator": "decimalSeparator"; "defaultValue": "defaultValue"; "invalid": "invalid"; "scale": "scale"; "step": "step"; "defaultUnit": "defaultUnit"; "unitNames": "unitNames"; "units": "units"; "wholeText": "wholeText"; "fractionText": "fractionText"; "signText": "signText"; }, { "onChangeEmitter": "mbsc-measurementChange"; }, never>;
}
export declare class MbscMeasurementChild extends MbscMeasurementBase {
    convert: boolean;
    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMeasurementChild, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscMeasurementChild, "[mbsc-m-c]", never, { "convert": "convert"; }, {}, never>;
}
export declare class MbscMeasurement extends MbscMeasurementBase {
    instance: Measurement;
    convert: (val: number, unit1: string, unit2: string) => number;
    options: MbscMeasurementOptions;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMeasurement, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscMeasurement, "[mbsc-measurement]", ["mobiscroll"], { "convert": "convert"; "options": "mbsc-options"; }, {}, never>;
}
export declare class MbscMeasurementComponent extends MbscMeasurement {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscMeasurementOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMeasurementComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscMeasurementComponent, "mbsc-measurement", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscTemperature extends MbscMeasurementChild {
    instance: Temperature;
    options: MbscTemperatureOptions;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTemperature, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscTemperature, "[mbsc-temperature]", ["mobiscroll"], { "value": "mbsc-temperature"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-temperatureChange"; }, never>;
}
export declare class MbscTemperatureComponent extends MbscTemperature {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscTemperatureOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTemperatureComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscTemperatureComponent, "mbsc-temperature", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscDistance extends MbscMeasurementBase {
    instance: Distance;
    options: MbscDistanceOptions;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscDistance, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscDistance, "[mbsc-distance]", ["mobiscroll"], { "value": "mbsc-distance"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-distanceChange"; }, never>;
}
export declare class MbscDistanceComponent extends MbscDistance {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscDistanceOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscDistanceComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscDistanceComponent, "mbsc-distance", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscSpeed extends MbscMeasurementBase {
    instance: Speed;
    options: MbscSpeedOptions;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSpeed, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscSpeed, "[mbsc-speed]", ["mobiscroll"], { "value": "mbsc-speed"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-speedChange"; }, never>;
}
export declare class MbscSpeedComponent extends MbscSpeed {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscSpeedOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscSpeedComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscSpeedComponent, "mbsc-speed", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscForce extends MbscMeasurementBase {
    instance: Force;
    options: MbscForceOptions;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscForce, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscForce, "[mbsc-force]", ["mobiscroll"], { "value": "mbsc-force"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-forceChange"; }, never>;
}
export declare class MbscForceComponent extends MbscForce {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscForceOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscForceComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscForceComponent, "mbsc-force", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscMass extends MbscMeasurementBase {
    instance: Mass;
    options: MbscMassOptions;
    value: string;
    onChangeEmitter: EventEmitter<string>;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService, view: ViewContainerRef);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMass, [null, null, { optional: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MbscMass, "[mbsc-mass]", ["mobiscroll"], { "value": "mbsc-mass"; "options": "mbsc-options"; }, { "onChangeEmitter": "mbsc-massChange"; }, never>;
}
export declare class MbscMassComponent extends MbscMass {
    inputIcon: string;
    iconAlign: 'left' | 'right';
    name: string;
    error: boolean;
    errorMessage: string;
    options: MbscMassOptions;
    placeholder: string;
    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, inputService: MbscInputService, optionService: MbscOptionsService);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscMassComponent, [null, null, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscMassComponent, "mbsc-mass", ["mobiscroll"], { "inputIcon": "icon"; "iconAlign": "icon-align"; "name": "name"; "error": "error"; "errorMessage": "errorMessage"; "options": "options"; "placeholder": "placeholder"; }, {}, never, ["*"]>;
}
export declare class MbscMeasurementModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscMeasurementModule, [typeof MbscMeasurement, typeof MbscMeasurementBase, typeof MbscMeasurementChild, typeof MbscMeasurementComponent, typeof MbscTemperature, typeof MbscTemperatureComponent, typeof MbscDistance, typeof MbscDistanceComponent, typeof MbscSpeed, typeof MbscSpeedComponent, typeof MbscForce, typeof MbscForceComponent, typeof MbscMass, typeof MbscMassComponent], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscScrollerBaseModule, typeof ɵngcc3.MbscInputModule], [typeof MbscMeasurement, typeof MbscMeasurementBase, typeof MbscMeasurementChild, typeof MbscMeasurementComponent, typeof MbscTemperature, typeof MbscTemperatureComponent, typeof MbscDistance, typeof MbscDistanceComponent, typeof MbscSpeed, typeof MbscSpeedComponent, typeof MbscForce, typeof MbscForceComponent, typeof MbscMass, typeof MbscMassComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscMeasurementModule>;
}

//# sourceMappingURL=measurement.angular.d.ts.map