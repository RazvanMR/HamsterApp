{"version":3,"file":"angular.d.ts","sources":["angular.d.ts"],"names":[],"mappingssourcesContent":["import { mobiscroll } from '../core/dom';\nimport { $, extend, MbscCoreOptions } from '../core/core';\nimport { MbscFrameOptions } from '../classes/frame';\nimport { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { NgControl, ControlValueAccessor } from '@angular/forms';\nimport { Observable } from '../util/observable';\nimport { MbscFormValueBase } from '../input.angular';\nexport declare class MbscRouterToken {\n}\nexport declare class MbscOptionsService {\n    private _options;\n    options: any;\n}\nexport declare class MbscInputService {\n    private _controlSet;\n    isControlSet: boolean;\n    private _componentRef;\n    input: MbscFormValueBase;\n}\nexport declare class MbscListService {\n    private addRemoveObservable;\n    notifyAddRemove(item: any): void;\n    onAddRemove(): Observable<any>;\n}\nexport declare class MbscBase implements AfterViewInit, OnDestroy {\n    initialElem: ElementRef;\n    protected zone: NgZone;\n    options: MbscCoreOptions;\n    cssClass: string;\n    theme: string;\n    themeVariant: 'auto' | 'dark' | 'light';\n    lang: string;\n    rtl: boolean;\n    responsive: object;\n    onInit: EventEmitter<{\n        inst: any;\n    }>;\n    onDestroy: EventEmitter<{\n        inst: any;\n    }>;\n    inlineOptionsObj: any;\n    pendingValue: any;\n    getInlineEvents(): void;\n    themeClassesSet: boolean;\n    setThemeClasses(): void;\n    clearThemeClasses(): void;\n    getThemeClasses(): string;\n    instance: any;\n    element: any;\n    protected setElement(): void;\n    constructor(initialElem: ElementRef, zone: NgZone);\n    ngAfterViewInit(): void;\n    startInit(): void;\n    getIonInput(): any;\n    initControl(): void;\n    ngOnDestroy(): void;\n    updateOptions(newOptions: any, optionChanged: boolean, invalidChanged: boolean, dataChanged: boolean): void;\n    ngOnChanges(changes: SimpleChanges): void;\n}\nexport declare class MbscValueBase extends MbscBase {\n    setNewValue(v: any): void;\n    constructor(initialElem: ElementRef, zone: NgZone);\n    initialValue: any;\n    protected setNewValueProxy(v: any): void;\n}\nexport declare class MbscCloneBase extends MbscValueBase implements DoCheck, OnInit {\n    constructor(initElem: ElementRef, zone: NgZone);\n    cloneDictionary: any;\n    makeClone(setting: string, value: Array<any>): void;\n    ngDoCheck(): void;\n    ngOnInit(): void;\n}\nexport declare class MbscControlBase extends MbscCloneBase implements ControlValueAccessor {\n    protected control: NgControl;\n    _inputService: MbscInputService;\n    _view: ViewContainerRef;\n    labelStyle: 'stacked' | 'inline' | 'floating';\n    inputStyle: 'underline' | 'box' | 'outline';\n    showOnFocus: boolean;\n    showOnTap: boolean;\n    disabled: boolean;\n    readonly optionExtensions: any;\n    readonly enableManualEdit: boolean;\n    _needsTimeout: boolean;\n    onChange: (value: any) => any;\n    onTouch: (ev?: any) => any;\n    onChangeEmitter: EventEmitter<any>;\n    protected handleChange(element?: any): void;\n    oldAccessor: any;\n    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, _inputService: MbscInputService, _view: ViewContainerRef);\n    overwriteAccessor(): void;\n    ngAfterViewInit(): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    writeValue(v: any): void;\n}\nexport declare class MbscFrameBase extends MbscControlBase implements OnInit {\n    options: MbscFrameOptions;\n    dropdown: boolean;\n    anchor: string | HTMLElement;\n    animate: boolean | 'fade' | 'flip' | 'pop' | 'swing' | 'slidevertical' | 'slidehorizontal' | 'slidedown' | 'slideup';\n    buttons: Array<any>;\n    closeOnOverlayTap: boolean;\n    context: string | HTMLElement;\n    display: 'top' | 'bottom' | 'bubble' | 'inline' | 'center';\n    showInput: boolean;\n    focusOnClose: boolean | string | HTMLElement;\n    focusTrap: boolean;\n    headerText: string | boolean | ((formattedValue: string) => string);\n    scrollLock: boolean;\n    touchUi: boolean;\n    onBeforeClose: EventEmitter<{\n        valueText: string;\n        button: string;\n        inst: any;\n    }>;\n    onBeforeShow: EventEmitter<{\n        inst: any;\n    }>;\n    onCancel: EventEmitter<{\n        valuteText: string;\n        inst: any;\n    }>;\n    onClose: EventEmitter<{\n        valueText: string;\n        inst: any;\n    }>;\n    onFill: EventEmitter<{\n        inst: any;\n    }>;\n    onMarkupReady: EventEmitter<{\n        target: HTMLElement;\n        inst: any;\n    }>;\n    onPosition: EventEmitter<{\n        target: HTMLElement;\n        windowWidth: number;\n        windowHeight: number;\n        inst: any;\n    }>;\n    onShow: EventEmitter<{\n        target: HTMLElement;\n        valueText: string;\n        inst: any;\n    }>;\n    readonly inline: boolean;\n    constructor(initialElem: ElementRef, zone: NgZone, control: NgControl, _inputService: MbscInputService, view: ViewContainerRef);\n    ngOnInit(): void;\n}\nexport declare class MbscScrollerBase extends MbscFrameBase {\n    circular: boolean | Array<boolean>;\n    height: number;\n    layout: 'liquid' | 'fixed';\n    maxWidth: number | Array<number>;\n    minWidth: number | Array<number>;\n    multiline: number;\n    readonly: boolean | Array<boolean>;\n    rows: number;\n    showLabel: boolean;\n    showScrollArrows: boolean;\n    wheels: Array<any>;\n    width: number | Array<number>;\n    validate: (event: {\n        values: Array<any>;\n        index: number;\n        direction: number;\n    }, inst: any) => (void | {\n        disabled?: Array<any>;\n        valid?: Array<any>;\n    });\n    cancelText: string;\n    clearText: string;\n    selectedText: string;\n    setText: string;\n    formatValue: (data: Array<any>) => string;\n    parseValue: (valueText: string) => any;\n    onWheelChange: EventEmitter<{\n        valueText?: string;\n        inst: any;\n    }>;\n    onSet: EventEmitter<{\n        valueText?: string;\n        inst: any;\n    }>;\n    onItemTap: EventEmitter<{\n        inst: any;\n    }>;\n    onClear: EventEmitter<{\n        inst: any;\n    }>;\n    constructor(initialElement: ElementRef, zone: NgZone, control: NgControl, _inputService: MbscInputService, view: ViewContainerRef);\n}\nexport declare class MbscBaseModule {\n}\nexport declare class MbscFrameBaseModule {\n}\nexport declare class MbscScrollerBaseModule {\n}\ndeclare function deepEqualsArray(a1: Array<any>, a2: Array<any>): boolean;\ndeclare function isDateEqual(d1: any, d2: any): boolean;\ndeclare function emptyOrTrue(val: any): boolean;\ndeclare const INPUT_TEMPLATE = \"<mbsc-input *ngIf=\\\"!inline || showInput\\\"\\n    [controlNg]=\\\"false\\\" [name]=\\\"name\\\" [theme]=\\\"theme\\\" [themeVariant]=\\\"themeVariant\\\" [label-style]=\\\"labelStyle\\\" [input-style]=\\\"inputStyle\\\" [disabled]=\\\"disabled\\\" [dropdown]=\\\"dropdown\\\" [placeholder]=\\\"placeholder\\\"\\n    [error]=\\\"error\\\" [errorMessage]=\\\"errorMessage\\\"\\n    [icon]=\\\"inputIcon\\\" [icon-align]=\\\"iconAlign\\\">\\n    <ng-content></ng-content>\\n</mbsc-input>\";\nexport { $, extend, mobiscroll, deepEqualsArray, isDateEqual, emptyOrTrue, INPUT_TEMPLATE, Observable, };\n"]}