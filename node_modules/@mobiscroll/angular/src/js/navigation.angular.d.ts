import { AfterViewInit, Injector, EventEmitter, ElementRef, NgZone, QueryList } from '@angular/core';
import { MbscOptionsService, MbscRouterToken } from './frameworks/angular';
import { Navigation } from './classes/navigation';
import { MbscNotifyItemService } from './classes/scrollview-base.angular';
import { MbscNavItemBase, MbscNavigationBase } from './classes/navigation-base.angular';
import { MbscNavOptions } from './classes/navigation';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './classes/navigation-base.angular';
export { MbscNavOptions };
export declare class MbscNavItem extends MbscNavItemBase {
    inj: Injector;
    _instance: Navigation;
    initialBadge: string;
    badge: string;
    routerLink: any;
    routerLinkActiveOptions: {
        exact: boolean;
    };
    injectedRouter: any;
    activatedRoute: any;
    debounceHandler: any;
    instObserver: number;
    constructor(notifyItemService: MbscNotifyItemService, elem: ElementRef, inj: Injector, routerToken: MbscRouterToken);
    checkSelected(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNavItem, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNavItem, "mbsc-nav-item", never, { "badge": "badge"; "routerLink": "routerLink"; "routerLinkActiveOptions": "routerLinkActiveOptions"; }, {}, never, ["*"]>;
}
export declare class MbscNav extends MbscNavigationBase implements AfterViewInit {
    optionService: MbscOptionsService;
    instance: Navigation;
    type: 'bottom' | 'hamburger' | 'tab';
    select: 'single';
    moreText: string;
    moreIcon: string;
    menuText: string;
    menuIcon: string;
    onMenuHide: EventEmitter<{
        target: HTMLElement;
        inst: any;
    }>;
    onMenuShow: EventEmitter<{
        target: HTMLElement;
        inst: any;
    }>;
    addRemoveObserver: number;
    constructor(initialElem: ElementRef, zone: NgZone, notifyItemService: MbscNotifyItemService, optionService: MbscOptionsService);
    items: QueryList<MbscNavItemBase>;
    initControl(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscNav, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscNav, "mbsc-nav", ["mobiscroll"], { "moreText": "moreText"; "moreIcon": "moreIcon"; "menuText": "menuText"; "menuIcon": "menuIcon"; }, { "onMenuHide": "onMenuHide"; "onMenuShow": "onMenuShow"; }, ["items"], ["*"]>;
}
export declare class MbscBottomNav extends MbscNav {
    constructor(initialElem: ElementRef, zone: NgZone, navItemService: MbscNotifyItemService, optionService: MbscOptionsService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscBottomNav, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscBottomNav, "mbsc-bottom-nav", ["mobiscroll"], {}, {}, never, ["*"]>;
}
export declare class MbscHamburgerNav extends MbscNav {
    constructor(initialElem: ElementRef, zone: NgZone, navItemService: MbscNotifyItemService, optionService: MbscOptionsService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscHamburgerNav, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscHamburgerNav, "mbsc-hamburger-nav", ["mobiscroll"], {}, {}, never, ["*"]>;
}
export declare class MbscTabNav extends MbscNav {
    constructor(initialElem: ElementRef, zone: NgZone, navItemService: MbscNotifyItemService, optionService: MbscOptionsService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MbscTabNav, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MbscTabNav, "mbsc-tab-nav", ["mobiscroll"], {}, {}, never, ["*"]>;
}
export declare class MbscNavigationModule {
    static forRoot(config: {
        angularRouter: any;
    }): (any)&{ngModule:MbscNavigationModule};
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MbscNavigationModule, [typeof MbscNavItem, typeof MbscNav, typeof MbscBottomNav, typeof MbscHamburgerNav, typeof MbscTabNav], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.MbscNavigationBaseModule], [typeof MbscNavItem, typeof MbscNav, typeof MbscBottomNav, typeof MbscHamburgerNav, typeof MbscTabNav]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MbscNavigationModule>;
}

//# sourceMappingURL=navigation.angular.d.ts.map